from aiogram import Bot, Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from .util import BaseUser, Operator, User
from .states import OperatorReg
from bot import config
from bot import keyboards
from bot import ai

from loguru import logger
import os

router = Router()

@router.message(Command("start"))
async def start_handler(message: Message):
    """Start command handler"""
    greeting_text = f"{message.from_user.first_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üåü –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ RuTube, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.\n"\
                     f"–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"

    await message.answer(greeting_text)


@router.message(Command('reg_as_operator'))
async def reg_as_operator(message: Message, state: FSMContext):
    """Registration as operator"""
    password = message.text.split(" ")[1] # –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    
    if password == os.getenv("OPERATOR_PASSWORD"):
        await state.set_state(OperatorReg.name)
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –≤—ã –Ω–µ –∑–∞—à–ª–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", 
            reply_markup=types.ReplyKeyboardRemove()
        ) 


@router.message(OperatorReg.name)
async def set_operator_name(message: Message, state: FSMContext):
    """Set operator name"""
    
    name = message.text.strip()
    new_operator = Operator(message.chat.id, name)

    User(new_operator.user_id).delete()
    
    await message.answer(f"{name}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    
    
@router.message((F.text.lower() == "menu") | (F.text.lower() == "–º–µ–Ω—é")) 
@router.message(Command('menu'))
async def show_op_menu(message):
    """Show operator menu"""
    
    user = BaseUser(message.chat.id)
    
    ## Checking if user is an operator
    if user.is_operator:
        await message.answer("üìç –û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é", reply_markup=keyboards.util.get_operator_menu(user.working))


@router.message()
async def user_request_handler(message: Message, state: FSMContext):
    """Handling user or operator messeges"""
    
    user = BaseUser(message.chat.id)

    ## Checking if the user is an operator
    if not user.is_operator:
        
        user += message.text
        
        ## If user is not handled by any operator
        if user.handled_by == 0:
            
            if not user.username:
                user.username = message.from_user.full_name
            
            await message.answer(text="–ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
            
            ## Getting free operator
            handling_operator = Operator.get_free_operator()
            
            ## If free operator is found then start connection
            if handling_operator:
                await start_connection(message.bot, handling_operator, user)
                
            ## Otherwise alert that there are no operators
            else:
                await message.answer(text="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å")
            
        else:   
            ## Redirecting messages from user to operator
            await message.bot.send_message(user.handled_by, message.text, reply_markup=keyboards.reply.KB_STOP_CONN)
            
            ## Sending hint generated by AI to the operator
            await send_ai_hint(message.bot, user.handled_by, [message.text])

    ## If user is an operator
    else:
        user_to_help = user.operator_assigned_user
        if user_to_help:
            if message.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ":
                user_to_help.delete()# –ü–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º —Ä–µ—à–µ–Ω–∏–µ–º
                
                if len(User.list_users_needing_support()) > 0: 
                    user.connect_to()
            else: 
                await message.bot.send_message(user_to_help.user_id, message.text, reply_markup=types.ReplyKeyboardRemove())
        
        
@router.callback_query(lambda c: c.data.startswith("operator"))
async def operator_callback(callback: CallbackQuery):
    """Callback for operator menu"""       
    command = callback.data.split("|")[1]
    
    operator = Operator(callback.from_user.id)
    
    match command:
        case "start_support":
            ## Set operator as working
            operator.working = True
            
            ## Figuring out that there are users to support
            users_to_support = User.list_users_needing_support()
            
            
            ## If there are users to support then start connection
            if users_to_support: 
                await start_connection(callback.bot, operator, users_to_support[0])
            
            ## Otherwise send an alert that there are no users
            else:
                await callback.answer("–ü–æ–∫–∞ —á—Ç–æ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç", show_alert=True) 
        
        case "stop_support":
            
            ## If operator is busy he cannot stop support
            if operator.is_busy:
                await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                
            ## Otherwise set operator as not working
            else:
                operator.working = False
                await callback.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
           
    ## Update the operator menu    
    await callback.message.edit_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=keyboards.util.get_operator_menu(operator.working))


async def start_connection(bot: Bot, operator: Operator, user: User = None):
    """Connect user to the operator and send a message to the user that they are being supported"""
    
    ## Connect the operator to the user
    operator.connect_to(user)
                
    ## Send a message to the user that they are being supported
    await bot.send_message(
        chat_id=user.user_id,
        text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {operator.username}",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    ## Sending information about current user to the operator
    await bot.send_message(
        chat_id=operator.user_id,
        text=f'–í—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://user?id={user.user_id}">{user.username}</a> ID: {user.user_id}'
    )
    
    query = []
    
    ## Send the chat history to the operator
    for record in user.history:
        query.append(record)
        await bot.send_message(
            chat_id=operator.user_id,
            text=record
        )

    ## Sending hint generated by AI to the operator
    await send_ai_hint(bot, operator.user_id, query)
    
    
async def send_ai_hint(bot: Bot, operator_id: int, query: list):
    """Generating and sending AI hint to the operator"""
    
    ## Generating AI hint
    ai_hint = ai.get_hint(query_text=" ".join(query))
    
    ## Sending hint to the operator
    await bot.send_message(operator_id, ai_hint, reply_markup=keyboards.inline.KB_SEND_ASSISTENT_MESSAGE)
    
    
@router.callback_query(F.data=="send_assistent_message")
async def send_assistent_message(callback: CallbackQuery):
    """Send AI hint to the user assigned to the operator"""
    
    ## Get the operator
    operator = Operator(callback.from_user.id)
    
    ## Get the user assigned to the operator
    user = operator.operator_assigned_user
    
    ## Send the AI hint to the user
    await callback.bot.send_message(user.user_id, callback.message.text)
    
    ## Send the AI hint to the operator
    await callback.message.edit_text(
        text=callback.message.text + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        reply_markup=keyboards.inline.KB_EMPTY
    )
